import tensorflow as tf
import tensorflow_datasets as tfds
from tensorflow.keras.layers import TextVectorization
from tensorflow.keras.models import Model
from tensorflow.keras import Input

max_features = 10000
sequence_length = 250

def preparar_y_entrenar():
    print("Cargando dataset IMDb...")
    (train_data, test_data), info = tfds.load(
        "imdb_reviews",
        split=["train", "test"],
        as_supervised=True,
        with_info=True
    )

    train_text = train_data.map(lambda text, label: text)

    vectorize_layer = TextVectorization(
        max_tokens=max_features,
        output_mode='int',
        output_sequence_length=sequence_length
    )
    vectorize_layer.adapt(train_text)

    def vectorize_text(text, label):
        text = tf.expand_dims(text, -1)
        return vectorize_layer(text), label

    train_data_vec = train_data.map(vectorize_text).cache().prefetch(tf.data.AUTOTUNE)
    test_data_vec = test_data.map(vectorize_text).cache().prefetch(tf.data.AUTOTUNE)

    model = tf.keras.Sequential([
        tf.keras.layers.Embedding(max_features + 1, 16),
        tf.keras.layers.GlobalAveragePooling1D(),
        tf.keras.layers.Dense(16, activation='relu'),
        tf.keras.layers.Dense(1, activation='sigmoid')
    ])

    model.compile(loss='binary_crossentropy',
                  optimizer='adam',
                  metrics=['accuracy'])

    print("Entrenando modelo, esto puede tardar unos minutos...")
    model.fit(train_data_vec.batch(512),
              validation_data=test_data_vec.batch(512),
              epochs=5)

    # Crear modelo completo que incluya vectorizador
    text_input = Input(shape=(1,), dtype=tf.string)
    x = vectorize_layer(text_input)
    x = model.layers[0](x)
    for layer in model.layers[1:]:
        x = layer(x)
    full_model = Model(text_input, x)
    full_model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
    full_model.save("modelo_completo_imdb")
    print("Modelo guardado en 'modelo_completo_imdb'.")

if __name__ == "__main__":
    preparar_y_entrenar()